
Ideas on migrating the codepage converter implementations.
===================================================================

Currently the implementation of the codepage converters is a mess.
Everything is in one class (org.tn5250j.encoding.NativeCodePage).
There are several if-then or case statements and the flow of how
one byte is converted seems to be obfuscated. Even adding a new
converter implementation is a big challenge. Additionally the
comments seems to be not correct and a couple of times it's not
clear, what is meant by EBCDIC or ASCII.
Some converters also seem to lack correctness.

To make a long story short, doing a refactoring would ease future
development. There are also posts in the SF.net forum, requesting
support for more codepages.

UPDATE 07/2012 - It's done!
------------------------------------------------------------------
Finally, I've got in contact with someone who supported me 
with a Hebrew test environment. So I've decided to rewrite the 
built-in code page converters. It's done and works fine :-)


Refactoring roadmap
------------------------------------------------------------------
To make the char mapping easier, there is not so much to do:
 - Separate an 'CodePage' interface (similar to org.tn5250j.encoding.CodePage)
 - Split the NativeCodePage in a factory and an adapter.
    - The factory provides and creates instances.
    - The adapter makes the implementation of the interface easier.
 - Split the ToolboxCodePage in a factory and an adapter.
    - ...
    - ...
 - Create one class for each codepage, example: CCSID37.java for '37'
 - Use something like the 'service loader' technique to load the codepage classes
   (See http://java.sun.com/javase/6/docs/api/java/util/ServiceLoader.html)
   Due to the fact, that this technique is available in Java 1.6+, 
   we need to backport it to Java1.5. And backporting seems to be easy.
   So in future versions we can just drop the backport.
 - Maybe extract the codepages from the JTOpen project.

As a small side benefit we may lower the memory usage and may speed up
the converter itself.

Testing
------------------------------------------------------------------
All codepage converters where migrated using a much faster implementation
and using codepage data manually extracted from JTOpen v6.4.
Furthermore all codepage converters where put under test,
comparing old and new implementation.

The test simply takes one byte, transforms it to unicode and then back to byte.
In other words: EBCDIC byte -> Unicode char -> EBCDIC byte.
Each converter gets tested for 
 a) existing implementation on itself
 b) new implementation on itself
 c) existing impl. compared to new impl. (should be the same result)
If there are errors:
 d) existing impl. compared to JTOpen Toolbox 
 e) new impl. compared to JTOpen Toolbox 
 
The goal is, that each converter is correct on itself AND 
at least to the old implementation or equal to the JTOpen Toolbox reference.
 
-------------------------------------------------------------------------------
$Id$