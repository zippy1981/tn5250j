<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "document-v11.dtd">
<document> 
  <header> 
    <title>Building with Ant</title> 
  </header> 
  <body> 
  	<p>
		I have only tested this with ant build 1.4.1 so do not know if it is backwards
		compatible with previous versions.</p>
		<p>
		A lot of new options and targets have been added by Christian Geisert.  This
		really makes the build process more flexible and complete.  Great thanks!!!!
		For a list of these see step 7. below.</p>
		<note>
		The new .jar file will be in the dist directly and named tn5250j and not
		my5250j.</note>
		<section><title>Steps to get started after setting up ant</title>
			<p>1. Create a base directory to place source</p>
			<p>2. Create two directories beneath the base directory called lib and src
			for example your directory structure should look like the following:</p>
			<source>
base directory
   |
   + - lib
   |
   + - src
	 		</source>
			<p>
			3. Unzip and place all source files from tn5250j source zip file that was
			downloaded into src directory.  This includes the Meta-inf directory.</p>
			<p>
			!! As of the newest build.xml the manifest file is built for you automagically.</p>
			<p>
			4. Place the included build.xml file into the base directory.</p>
			<p>5. Place the extra .jar files used for mailing in the lib directory.</p>
			<note>this is very important or some modules will not compile</note>
			<p>
			You can download the e-mail api's from sun.  You will need two packages.
      <link href="http://java.sun.com/products/javamail/">http://java.sun.com/products/javamail/</link>
      <link href="http://java.sun.com/products/javabeans/glasgow/jaf.html">http://java.sun.com/products/javabeans/glasgow/jaf.html</link>
			</p>
			<p>
			JavaMail jar files:</p>
				<ul>
					<li>activation.jar</li>
					<li>mail.jar</li>
					<li>mailapi.jar</li>
					<li>smtp.jar</li>
			 </ul>
		<p>
		6. Now execute ant using one of the methods described in the ant documentation.
		</p>
   <p>using the sample bat file for windows below:</p>
	 <source>
   c:\basedirectory>build all
	 </source>
	 <p>
   Sample Windows build.bat that I use on windows</p>
<source>
@echo off

rem this batch-file can be used to override the java_home or ant_home
rem environment or to set a special classpath and so on...
set ANT_HOME=D:\jakarta-ant-1.4.1
set JAVA_HOME=C:\jdk1.3.1

call %ANT_HOME%\bin\ant -buildfile build.xml %1 %2 %3 %4 %5 %6 %7 %8 %9
</source>

			<note>!*** NOTE FOR JAVA 1.4 ***
			use the compile-dep command line parameter supported by the build.xml file.
			This will allow the compilation of the source using deprecation options
			</note>
			<p>
			For more information on the command line parameters that the build process
			supports execute the following:</p>
			<source>
>ant -projecthelp
			</source>

			<p>7. Main targets:</p>
<source>
 all               Clean, Compile, Jar
 clean             Cleanup your workspace (delete build-directory, ...)
 compile           Compile your source-files
 compile-dep       Compile your source-files with deprecation turned on
 dist              Creates all distribution archives
 dist-bin          Create a Zip and TGZ Archives with all the binary files
 dist-bin-prepare  Prepares binary distribution
 dist-bin-tgz      Create a Tgz-File with all the binary files
 dist-bin-zip      Create a Zip-File with all the binary files
 dist-src          Create a Zip and TGZ Archives with all source files
 dist-src-prepare  Prepares source distribution
 dist-src-tgz      Create a Tgz-File with all the source files
 dist-src-zip      Create a Zip-File with all the source files
 info              Prints a short summary of this project
 javadoc           Creates the javadoc API documentation
 package           Create a Jar-File of your compiled classes
</source>

		</section>

  </body>
</document>
