<?xml version="1.0"?>

<project default="docs" basedir="." name="project build file">

<description>
                   * ===================================== *
                   |   Krysalis Centipede Build System     |
                   * ===================================== *
                                     by

                   Nicola Ken Barozzi (nicolaken@apache.org)
                   Marc Johnson (mjohnson@apache.org)


                   For a simple interactive build, simply
                   run the build script (build.bat or build.sh)
</description>

  <path id="classpath">
    <fileset dir="./lib/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/core">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!-- =================================================================== -->
  <!-- Targets for this project                                            -->
  <!-- =================================================================== -->

  <!--<target name="init" depends="-init">-->
  <target name="init" depends="">
    <property name="name"                  value="${xgump.module.project.name}"/>

    <property name="build.root"            value="."/>
    <property name="build.dir"             value="build/"/>
    <property name="resource.dir"          value="src/resources"/>
    <property name="context.dir"           value="src/documentation"/>
    <property name="build.docs"            value="${build.dir}/docs"/>
    <property name="build.context"         value="${build.dir}/work"/>
    <property name="build.dest"            value="${build.dir}/classes"/>

    <!--
    <property name="build.root"            value="${xlayout.build.dir}"/>
    <property name="build.dir"             value="${xlayout.build.dir}"/>
    <property name="resource.dir"          value="${xlayout.source.resources.dir}"/>
    <property name="context.dir"           value="${xlayout.source.documentation.dir}"/>
    <property name="build.docs"            value="${xlayout.build.documentation.dir}"/>
    <property name="build.javadocs"        value="${xlayout.build.documentation.javadocs.dir}"/>
    <property name="build.context"         value="${xlayout.build.work.dir}"/>
    <property name="build.dest"            value="${xlayout.build.classes.dir}"/>
    <property name="build.scratchpad.dest" value="${xlayout.build.scratchpad.classes.dir}"/>
    -->
    
    <property name="tools.dir"             value="./tools"/>
    <property name="tools.jar"             value="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"         property="tools.jar.present"/>

  </target>

  <!-- ================== -->
  <!-- Prepares the docs  -->
  <!-- ================== -->
  <target name="prepare-docs" depends="init">

    <property name="centipede.tools.cents.forrest.loglevel" value="ERROR"/>
    <property name="use.skin" value="bert"/>

    <property name="documentation.context.dir"  value="${resource.dir}"/>
    <property name="documentation.source.dir"   value="${context.dir}"/>

    <echo>Running docs generation from: ${documentation.source.dir}.</echo>

    <!-- define filters -->
    <filter token="skin"              value="${use.skin}"/>
    <filter token="link1"             value="apache"/>
    <filter token="link1.href"        value="http://www.apache.org/"/>
    <filter token="link2"             value="xml.apache"/>
    <filter token="link2.href"        value="http://xml.apache.org/"/>
    <!-- the breadcrumb script already generates it, so it needs to be kept blank -->
    <filter token="link3"             value=""/>
    <filter token="link3.href"        value=""/>
    <filter token="group-logo.src"    value="images/group-logo.gif"/>
    <filter token="group-logo.href"   value="http://xml.apache.org/"/>
    <filter token="group-logo.alt"    value="Apache XML logo"/>

    <filter token="project-logo.src"  value="images/tn5250j-logo.png"/>
    <filter token="project-logo.href" value="http://tn5250j.sf.net/"/>
    <filter token="project-logo.alt"  value="TN5250J logo"/>

    <filter token="year" value="2002"/>
    <filter token="vendor" value="K J P"/>

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>

    <!-- make filtered copy of XML docs -->
    <copy todir="${build.context}" filtering="on" overwrite="true">
      <fileset dir="${documentation.source.dir}" casesensitive="no">
        <include name="**/*.x*"/>
      </fileset>
    </copy>

    <!-- make non filtered copy of images -->
    <copy todir="${build.context}" filtering="off">
      <fileset dir="${documentation.source.dir}" casesensitive="no">
        <exclude name="**/*.x*"/>
      </fileset>
    </copy>

    <!-- Copy entity catalog, entities and class files -->
    <copy todir="${build.context}/resources/schema" filtering="on">
      <fileset dir="${resource.dir}/schema"/>
    </copy>
    <mkdir dir="${build.context}/WEB-INF/classes"/>
    <copy todir="${build.context}/WEB-INF/classes">
      <fileset dir="${build.context}/resources/schema">
        <include name="CatalogManager.properties"/>
      </fileset>
    <!--
      <fileset dir="${build.dest}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${build.scratchpad.dest}">
        <include name="**/*.class"/>
      </fileset>
    -->
    </copy>

    <!-- Copy Cocoon configuration and sitemap -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${documentation.context.dir}/conf">
        <include name="sitemap.xmap"/>
        <include name="cocoon.xconf"/>
        <include name="logkit.xconf"/>
      </fileset>
    </copy>
    <copy todir="${build.context}/WEB-INF/" filtering="on">
      <fileset dir="${documentation.context.dir}/conf">
        <exclude name="sitemap.xmap"/>
      </fileset>
    </copy>

    <!-- Copy libraries -->
    <copy todir="${build.context}/library/" filtering="on">
      <fileset dir="${documentation.context.dir}/library">

      </fileset>
    </copy>

    <!-- Copy skins -->
    <copy todir="${build.context}/skins/" filtering="on">
      <fileset dir="${documentation.context.dir}/skins">
        <exclude name="**/images/**"/>
      </fileset>
    </copy>
    <copy todir="${build.context}/skins/" filtering="off">
      <fileset dir="${documentation.context.dir}/skins">
        <include name="**/images/**"/>
      </fileset>
    </copy>

    <!-- Copy the project descriptors -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir=".">
        <include name="*.*ml"/>
      </fileset>
    </copy>

  </target>

  <!-- =================================================================== -->
  <!-- Clean target                                                        -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="* Cleans the build docs directories">
    <delete dir="${build.dir}"/>
  </target>

  <!--
  <target name="clean"  description="Cleans the build directories">
    <delete dir="${xlayout.build.dir}"/>
  </target>
  -->
  
  <target name="cleandocs" depends="init" description="* Cleans the build docs directories">
    <delete dir="${build.docs}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Validate xml                                                        -->
  <!-- =================================================================== -->
  <target name="validate-docs" description="Checks that the xml files are valid and conform to the DTD.">
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes"
       className="org.apache.xerces.parsers.SAXParser">

       <classpath>
         <fileset dir="./lib/endorsed">
           <include name="*.jar"/>
         </fileset>
       </classpath>

       <fileset dir="."
                includes="*.x*" excludes="build.xml"/>

     </xmlvalidate>
  </target>

  <!-- =================================================================== -->
  <!-- The documentation system                                            -->
  <!-- =================================================================== -->
  <target name="docs"
          depends="cleandocs, owdocs"
          description="* Generates the documentation"/>

  <!-- =================================================================== -->
  <!-- The documentation system                                            -->
  <!-- =================================================================== -->
  <target name="owdocs"
          depends="prepare-docs"
          description="* Generates the documentation">

    <property name="dir.containing.docs" value="${build.context}"/>

    <echo message="-------------------------------------------------------------"/>
    <echo message="  Building docs, please stand by ..."/>

    <java classname="org.apache.cocoon.Main" fork="true" dir="${dir.containing.docs}" failonerror="true">
      <arg value="-c."/>
      <arg value="-d../docs"/>
      <arg value="-w../work"/>
      <arg value="-b../brokenlinks.txt"/>
<!--      <arg value="-k../work/logkit.xconf"/>-->
      <arg value="-u${centipede.tools.cents.forrest.loglevel}"/>
      <arg value="index.html"/>
      <classpath>
        <path refid="classpath"/>
        <fileset dir="${build.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${tools.dir}">
          <include name="*/lib/*.jar"/>
        </fileset>
        <pathelement location="${tools.jar}"/>
        <pathelement location="${build.context}/WEB-INF/classes"/>
      </classpath>
    </java>

    <echo message="  ...docs generated successfully in ${build.docs}"/>
    <echo message="-------------------------------------------------------------"/>

  </target>

</project>
